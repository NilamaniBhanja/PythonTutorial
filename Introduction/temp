using System;
using AVOGIModel.Models.Motor;
using BRMSintegration;
using BRMSIntegration.BRMSService;

namespace BRMSIntegration
{
    internal class AddonConfig
    {
        // ✅ Common helper to assign yearly rates dynamically
        private void SetYearlyRates(
            Func<int, decimal> getRate,
            Func<int, string> getStatus,
            Action<int, decimal> setRate,
            int tenure,
            int maxYears = 3)
        {
            for (int year = 1; year <= maxYears; year++)
            {
                if (year == 1 || getStatus(year) == "N")
                    setRate(year, getRate(year));
            }
        }

        // ✅ Common helper to check applicability
        private bool CheckApplicability(
            Func<int, string> getStatus,
            Func<int, decimal> getRate,
            int tenure)
        {
            if (getStatus(tenure) == "Y") return false;

            for (int i = 1; i <= tenure; i++)
            {
                if (getRate(i) == 0) return false;
            }
            return true;
        }

        // ✅ Generic pattern for all configs
        private void ApplyConfig(
            addonCoverDtls item,
            DomQuickQuote obj,
            Action initDefaults,
            Action<int, decimal> setRate,
            Action<bool> setApplicability,
            int tenure,
            int maxYears = 3)
        {
            initDefaults();

            SetYearlyRates(
                year => Convert.ToDecimal(year switch
                {
                    1 => item.addonCoverRate1,
                    2 => item.addonCoverRate2,
                    3 => item.addonCoverRate3,
                    4 => item.addonCoverRate4,
                    5 => item.addonCoverRate5,
                    _ => 0
                }),
                year => year switch
                {
                    1 => item.statusDecline1,
                    2 => item.statusDecline2,
                    3 => item.statusDecline3,
                    5 => item.statusDecline5,
                    _ => "N"
                },
                setRate,
                tenure,
                maxYears
            );

            setApplicability(
                CheckApplicability(
                    year => year switch
                    {
                        1 => item.statusDecline1,
                        2 => item.statusDecline2,
                        3 => item.statusDecline3,
                        5 => item.statusDecline5,
                        _ => "N"
                    },
                    year => Convert.ToDecimal(year switch
                    {
                        1 => item.addonCoverRate1,
                        2 => item.addonCoverRate2,
                        3 => item.addonCoverRate3,
                        4 => item.addonCoverRate4,
                        5 => item.addonCoverRate5,
                        _ => 0
                    }),
                    tenure
                )
            );
        }

        // ✅ Individual configs using ApplyConfig()

        public void ConsumableConfig(addonCoverDtls item, DomQuickQuote obj)
        {
            ApplyConfig(
                item, obj,
                () => obj.DefaultPerConsumable = obj.PerConsumableEntered = obj.ConsumableRateYear1 = Convert.ToDecimal(item.addonCoverRate1),
                (year, rate) =>
                {
                    if (year == 2) obj.ConsumableRateYear2 = rate;
                    if (year == 3) obj.ConsumableRateYear3 = rate;
                },
                applicable => obj.IsConsumableApplicable = applicable,
                obj.PolicyTenure
            );
        }

        public void DepreciationConfig(addonCoverDtls item, DomQuickQuote obj)
        {
            ApplyConfig(
                item, obj,
                () => obj.DefaultPerNilDep = obj.PerNilDepEntered = obj.NilDepreciationRateYear1 = Convert.ToDecimal(item.addonCoverRate1),
                (year, rate) =>
                {
                    if (year == 2) obj.NilDepreciationRateYear2 = rate;
                    if (year == 3) obj.NilDepreciationRateYear3 = rate;
                },
                applicable => obj.IsNilDepApplicable = applicable,
                obj.PolicyTenure
            );
        }

        public void EngineSafeConfig(addonCoverDtls item, DomQuickQuote obj)
        {
            ApplyConfig(
                item, obj,
                () => obj.DefaultPerEngine = obj.percentEngineCoverentered = obj.EngineSafeRateYear1 = Convert.ToDecimal(item.addonCoverRate1),
                (year, rate) =>
                {
                    if (year == 2) obj.EngineSafeRateYear2 = rate;
                    if (year == 3) obj.EngineSafeRateYear3 = rate;
                },
                applicable => obj.IsEngineCoverApplicable = applicable,
                obj.PolicyTenure
            );
        }

        public void GAPConfig(addonCoverDtls item, DomQuickQuote obj)
        {
            ApplyConfig(
                item, obj,
                () => obj.DefaultPerGAP = obj.percentGAPCoverentered = obj.GAPRateYear1 = Convert.ToDecimal(item.addonCoverRate1),
                (year, rate) =>
                {
                    if (year == 2) obj.GAPRateYear2 = rate;
                    if (year == 3) obj.GAPRateYear3 = rate;
                },
                applicable => obj.IsGapApplicable = applicable,
                obj.PolicyTenure
            );
        }

        public void KeyLossConfig(addonCoverDtls item, DomQuickQuote obj)
        {
            ApplyConfig(
                item, obj,
                () => obj.DefaultPerKeyLoss = obj.percentKeyLossentered = obj.KeyLossRateYear1 = Convert.ToDecimal(item.addonCoverRate1),
                (year, rate) =>
                {
                    if (year == 2) obj.KeyLossRateYear2 = rate;
                    if (year == 3) obj.KeyLossRateYear3 = rate;
                },
                applicable => obj.IsKeyApplicable = applicable,
                obj.PolicyTenure
            );
        }

        public void PassengerAssistConfig(addonCoverDtls item, DomQuickQuote obj)
        {
            ApplyConfig(
                item, obj,
                () => obj.DefaultPerPassengerAssist = obj.percentPassengerAssistentered = obj.PassengerAssistRateYear1 = Convert.ToDecimal(item.addonCoverRate1),
                (year, rate) =>
                {
                    if (year == 2) obj.PassengerAssistRateYear2 = rate;
                    if (year == 3) obj.PassengerAssistRateYear3 = rate;
                },
                applicable => obj.IsPassengerApplicable = applicable,
                obj.PolicyTenure
            );
        }

        public void TyreProtectConfig(addonCoverDtls item, DomQuickQuote obj)
        {
            ApplyConfig(
                item, obj,
                () => obj.DefaultPerTyreProtect = obj.percentTyreProtectentered = obj.TyreProtectRateYear1 = Convert.ToDecimal(item.addonCoverRate1),
                (year, rate) =>
                {
                    if (year == 2) obj.TyreProtectRateYear2 = rate;
                    if (year == 3) obj.TyreProtectRateYear3 = rate;
                },
                applicable => obj.IsTyreApplicable = applicable,
                obj.PolicyTenure
            );
        }

        public void RoadSideAssistConfig(addonCoverDtls item, DomQuickQuote obj)
        {
            ApplyConfig(
                item, obj,
                () => obj.DefaultPerRoadSideAssist = obj.percentRoadSideAssistentered = obj.RoadSideAssistRateYear1 = Convert.ToDecimal(item.addonCoverRate1),
                (year, rate) =>
                {
                    if (year == 2) obj.RoadSideAssistRateYear2 = rate;
                    if (year == 3) obj.RoadSideAssistRateYear3 = rate;
                },
                applicable => obj.IsRoadSideApplicable = applicable,
                obj.PolicyTenure
            );
        }

        public void RTIConfig(addonCoverDtls item, DomQuickQuote obj)
        {
            ApplyConfig(
                item, obj,
                () => obj.DefaultPerRTI = obj.percentRTIentered = obj.RTIRateYear1 = Convert.ToDecimal(item.addonCoverRate1),
                (year, rate) =>
                {
                    if (year == 2) obj.RTIRateYear2 = rate;
                    if (year == 3) obj.RTIRateYear3 = rate;
                },
                applicable => obj.IsRTIApplicable = applicable,
                obj.PolicyTenure
            );
        }
    }
}
