using System.ComponentModel.DataAnnotations;

namespace HomeConnect.Domain.TPSEntities;

public class tblUserExt
{
    [Key]
    public long UserExtID { get; set; }
    public Guid? RoleID { get; set; }
    public Guid UserID { get; set; }
    public string? RoleName { get; set; }
    public string? UserName { get; set; }
    public string IMDCode { get; set; }
    public bool? IsActive { get; set; }
    public bool? IsBlocked { get; set; }
    public string? FirstName { get; set; }
    public string? LastName { get; set; }
    public bool? IsSubID { get; set; }
    public bool? HasParent { get; set; }
    public bool? HasCumulative { get; set; }
    public bool CanCreateUser { get; set; }
    public decimal? VerticalId { get; set; }
    public bool? CancellationRights { get; set; }
    public bool? ForgotPasswordStatus { get; set; }
    public decimal? GroupId { get; set; }
    public bool? IsAgentBlocked { get; set; }
    public bool? isTPPartner { get; set; }
    public bool? isAdvancePaymentAllowed { get; set; }
    public bool? IsDocumentAccessed { get; set; }
    public bool? IsParentinAVO { get; set; }
    public string? ParentIMDCodeinAVO { get; set; }
    public string?  AppUserType { get; set; }
    public virtual UserBranchMapping UserBranchMappings { get; set; }

}



namespace HomeConnect.Domain.TPSEntities;

public class UserBranchMapping
{
    public decimal ID { get; set; }
    public System.Guid UserID { get; set; }
    //public virtual tblUserExt tblUserExts { get; set; }
    public decimal BranchID { get; set; }
    //public virtual MASBranch MASBranch { get; set; }
}



namespace HomeConnect.Domain.TPSEntities;

public class MASBranch
{
    public decimal ID { get; set; }
    public string Name { get; set; }
    public string OfficeType { get; set; }
    public string AddressLine1 { get; set; }
    public string AddressLine2 { get; set; }
    public string AddressLine3 { get; set; }
    public string Locality { get; set; }
    public Nullable<decimal> PinCode { get; set; }
    public string ISDCode { get; set; }
    public string STDCode { get; set; }
    public string Telephone { get; set; }
    public string CityName { get; set; }
    public string StateName { get; set; }
    public string BranchCode { get; set; }
    public string RegionCode { get; set; }
    public string RegionName { get; set; }
    public string ZoneCode { get; set; }
    public string ZoneName { get; set; }
    //public ICollection<UserBranchMapping> UserBranchMappings { get; set; }

}



protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    modelBuilder.Entity<TblUserExt>(entity =>
    {
        entity.HasKey(e => e.UserExtId);

        entity.HasOne(e => e.UserBranchMapping)
              .WithOne(e => e.User)
              .HasForeignKey<UserBranchMapping>(e => e.UserId)
              .HasPrincipalKey<TblUserExt>(e => e.UserId)
              .OnDelete(DeleteBehavior.ClientSetNull); // Optional: Choose behavior
    });

    modelBuilder.Entity<UserBranchMapping>(entity =>
    {
        entity.HasKey(e => e.Id);
    });

    // Other model configurations...
}



   async Task<T?> ITPSRepository<T>.FirstOrDefaultAsync(Expression<Func<T, bool>>? Filter, string IncludeProperties = "")
   {
       try
       {
           IQueryable<T> query = _dbSet;

           // Apply includes
           foreach (var includeProperty in IncludeProperties.Split(
               new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
           {
               query = query.Include(includeProperty);
           }

           // Apply filter
           if (Filter != null)
           {
               query = query.Where(Filter);
           }
           // Get total count before pagination
           var totalItems = await query.CountAsync();

           return await query
               .FirstOrDefaultAsync();
       }
       catch (Exception ex)
       {
           throw new Exception("DAta issue");
       }
   }


Error creating query string: An error was generated for warning 'Microsoft.EntityFrameworkCore.Query.InvalidIncludePathError': Unable to find navigation 'UserBranchMapping' specified in string based include path 'UserBranchMapping'. This exception can be suppressed or logged by passing event ID 'CoreEventId.InvalidIncludePathError' to the 'ConfigureWarnings' method in 'DbContext.OnConfiguring' or 'AddDbContext'..
  


// Many-to-One: UserBranchMapping â†’ MASBranch
    modelBuilder.Entity<UserBranchMapping>()
        .HasOne(ub => ub.MASBranch)
        .WithMany(b => b.UserBranchMappings)
        .HasForeignKey(ub => ub.BranchID)
        .OnDelete(DeleteBehavior.Restrict);
