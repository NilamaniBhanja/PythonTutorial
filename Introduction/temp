private string GetFullExceptionDetails(Exception ex)
{
    var sb = new StringBuilder();

    while (ex != null)
    {
        sb.AppendLine($"Message: {ex.Message}");
        sb.AppendLine($"Source: {ex.Source}");
        sb.AppendLine($"StackTrace: {ex.StackTrace}");
        ex = ex.InnerException;
        if (ex != null)
        {
            sb.AppendLine("---- Inner Exception ----");
        }
    }

    return sb.ToString();
}



private async Task LogAsync(string level, string message, string category,
                              object? data = null, Exception? ex = null, string? referenceType = null, int? referenceId=null)
{
    var logEntry = new LogEntry
    {
        ReferenceId = referenceId,
        ReferenceType = referenceType,
        Level = level,
        Message = message,
        Category = category,
        Data = data != null ? JsonSerializer.Serialize(data) : null,
        Exception = ex != null ? GetFullExceptionDetails(ex) : null,
        TimeStamp = DateTime.UtcNow  // Add timestamp if not already in entity
    };

    await _logRepository.AddAsync(logEntry);
}




try
{
    // some logic
}
catch (Exception ex)
{
    await _logger.LogError("Customer entry failed!", "Services.PolicyService", data: customerDto, ex: ex);
    throw;
}


protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    base.OnModelCreating(modelBuilder);

    modelBuilder.Entity<LogEntry>(entity =>
    {
        entity.Property(e => e.Exception)
              .HasColumnType("nvarchar(max)");

        entity.Property(e => e.Data)
              .HasColumnType("nvarchar(max)");
    });
}



SELECT COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'LogEntry' AND COLUMN_NAME = 'Exception';


   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.<ConsumeResultSetAsync>d__4.MoveNext()
   at Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.<ConsumeAsync>d__2.MoveNext()
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.<ExecuteAsync>d__50.MoveNext()
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.<ExecuteAsync>d__50.MoveNext()
   at Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch.<ExecuteAsync>d__15.MoveNext()
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.<ExecuteAsync>d__9.MoveNext()
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.<ExecuteAsync>d__9.MoveNext()
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.<ExecuteAsync>d__9.MoveNext()
   at Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.<SaveChangesAsync>d__8.MoveNext()
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.<SaveChangesAsync>d__111.MoveNext()
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.<SaveChangesAsync>d__115.MoveNext()
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.<ExecuteAsync>d__7`2.MoveNext()
   at Microsoft.EntityFrameworkCore.DbContext.<SaveChangesAsync>d__63.MoveNext()
   at Microsoft.EntityFrameworkCore.DbContext.<SaveChangesAsync>d__63.MoveNext()
   at HomeConnect.Infrastructure.Repositories.GenericRepository`1.<HomeConnect-Core-Interfaces-IRepository<T>-AddAsync>d__5.MoveNext() in \\amznfsxtvq2brbs.lgi.libertyinsurance.in\share\TPService\Nilamani\HomeConnect\Development\29July2025\intl-apac-in-gha-tps-homeconnect-api\HomeConnect.Infrastructure\Repositories\GenericRepository.cs:line 58




