using System;
using AVOGIModel.Models.Motor;
using BRMSintegration;
using BRMSIntegration.BRMSService;

namespace BRMSIntegration
{
    internal class AddonConfig
    {
        // ✅ Common helper to assign yearly rates dynamically
        private void SetYearlyRates(
            Func<int, decimal> getRate,
            Func<int, string> getStatus,
            Action<int, decimal> setRate,
            int tenure,
            int maxYears = 3)
        {
            for (int year = 1; year <= maxYears; year++)
            {
                if (year == 1 || getStatus(year) == "N")
                    setRate(year, getRate(year));
            }
        }

        // ✅ Common helper to check applicability
        private bool CheckApplicability(
            Func<int, string> getStatus,
            Func<int, decimal> getRate,
            int tenure)
        {
            if (getStatus(tenure) == "Y") return false;

            for (int i = 1; i <= tenure; i++)
            {
                if (getRate(i) == 0) return false;
            }
            return true;
        }

        // ✅ Generic pattern for all configs
        private void ApplyConfig(
            addonCoverDtls item,
            DomQuickQuote obj,
            Action initDefaults,
            Action<int, decimal> setRate,
            Action<bool> setApplicability,
            int tenure,
            int maxYears = 3)
        {
            initDefaults();

            SetYearlyRates(
                delegate (int year)
                {
                    switch (year)
                    {
                        case 1: return Convert.ToDecimal(item.addonCoverRate1);
                        case 2: return Convert.ToDecimal(item.addonCoverRate2);
                        case 3: return Convert.ToDecimal(item.addonCoverRate3);
                        case 4: return Convert.ToDecimal(item.addonCoverRate4);
                        case 5: return Convert.ToDecimal(item.addonCoverRate5);
                        default: return 0;
                    }
                },
                delegate (int year)
                {
                    switch (year)
                    {
                        case 1: return item.statusDecline1;
                        case 2: return item.statusDecline2;
                        case 3: return item.statusDecline3;
                        case 5: return item.statusDecline5;
                        default: return "N";
                    }
                },
                setRate,
                tenure,
                maxYears
            );

            setApplicability(
                CheckApplicability(
                    delegate (int year)
                    {
                        switch (year)
                        {
                            case 1: return item.statusDecline1;
                            case 2: return item.statusDecline2;
                            case 3: return item.statusDecline3;
                            case 5: return item.statusDecline5;
                            default: return "N";
                        }
                    },
                    delegate (int year)
                    {
                        switch (year)
                        {
                            case 1: return Convert.ToDecimal(item.addonCoverRate1);
                            case 2: return Convert.ToDecimal(item.addonCoverRate2);
                            case 3: return Convert.ToDecimal(item.addonCoverRate3);
                            case 4: return Convert.ToDecimal(item.addonCoverRate4);
                            case 5: return Convert.ToDecimal(item.addonCoverRate5);
                            default: return 0;
                        }
                    },
                    tenure
                )
            );
        }

        // ✅ Individual configs using ApplyConfig()

        public void ConsumableConfig(addonCoverDtls item, DomQuickQuote obj)
        {
            ApplyConfig(
                item, obj,
                delegate
                {
                    obj.DefaultPerConsumable = obj.PerConsumableEntered = obj.ConsumableRateYear1 = Convert.ToDecimal(item.addonCoverRate1);
                },
                delegate (int year, decimal rate)
                {
                    if (year == 2) obj.ConsumableRateYear2 = rate;
                    if (year == 3) obj.ConsumableRateYear3 = rate;
                },
                delegate (bool applicable) { obj.IsConsumableApplicable = applicable; },
                obj.PolicyTenure
            );
        }

        public void DepreciationConfig(addonCoverDtls item, DomQuickQuote obj)
        {
            ApplyConfig(
                item, obj,
                delegate
                {
                    obj.DefaultPerNilDep = obj.PerNilDepEntered = obj.NilDepreciationRateYear1 = Convert.ToDecimal(item.addonCoverRate1);
                },
                delegate (int year, decimal rate)
                {
                    if (year == 2) obj.NilDepreciationRateYear2 = rate;
                    if (year == 3) obj.NilDepreciationRateYear3 = rate;
                },
                delegate (bool applicable) { obj.IsNilDepApplicable = applicable; },
                obj.PolicyTenure
            );
        }

        public void EngineSafeConfig(addonCoverDtls item, DomQuickQuote obj)
        {
            ApplyConfig(
                item, obj,
                delegate
                {
                    obj.DefaultPerEngine = obj.percentEngineCoverentered = obj.EngineSafeRateYear1 = Convert.ToDecimal(item.addonCoverRate1);
                },
                delegate (int year, decimal rate)
                {
                    if (year == 2) obj.EngineSafeRateYear2 = rate;
                    if (year == 3) obj.EngineSafeRateYear3 = rate;
                },
                delegate (bool applicable) { obj.IsEngineCoverApplicable = applicable; },
                obj.PolicyTenure
            );
        }

        public void GAPConfig(addonCoverDtls item, DomQuickQuote obj)
        {
            ApplyConfig(
                item, obj,
                delegate
                {
                    obj.DefaultPerGAP = obj.percentGAPCoverentered = obj.GAPRateYear1 = Convert.ToDecimal(item.addonCoverRate1);
                },
                delegate (int year, decimal rate)
                {
                    if (year == 2) obj.GAPRateYear2 = rate;
                    if (year == 3) obj.GAPRateYear3 = rate;
                },
                delegate (bool applicable) { obj.IsGapApplicable = applicable; },
                obj.PolicyTenure
            );
        }

        public void KeyLossConfig(addonCoverDtls item, DomQuickQuote obj)
        {
            ApplyConfig(
                item, obj,
                delegate
                {
                    obj.DefaultPerKeyLoss = obj.percentKeyLossentered = obj.KeyLossRateYear1 = Convert.ToDecimal(item.addonCoverRate1);
                },
                delegate (int year, decimal rate)
                {
                    if (year == 2) obj.KeyLossRateYear2 = rate;
                    if (year == 3) obj.KeyLossRateYear3 = rate;
                },
                delegate (bool applicable) { obj.IsKeyApplicable = applicable; },
                obj.PolicyTenure
            );
        }

        public void PassengerAssistConfig(addonCoverDtls item, DomQuickQuote obj)
        {
            ApplyConfig(
                item, obj,
                delegate
                {
                    obj.DefaultPerPassengerAssist = obj.percentPassengerAssistentered = obj.PassengerAssistRateYear1 = Convert.ToDecimal(item.addonCoverRate1);
                },
                delegate (int year, decimal rate)
                {
                    if (year == 2) obj.PassengerAssistRateYear2 = rate;
                    if (year == 3) obj.PassengerAssistRateYear3 = rate;
                },
                delegate (bool applicable) { obj.IsPassengerApplicable = applicable; },
                obj.PolicyTenure
            );
        }

        public void TyreProtectConfig(addonCoverDtls item, DomQuickQuote obj)
        {
            ApplyConfig(
                item, obj,
                delegate
                {
                    obj.DefaultPerTyreProtect = obj.percentTyreProtectentered = obj.TyreProtectRateYear1 = Convert.ToDecimal(item.addonCoverRate1);
                },
                delegate (int year, decimal rate)
                {
                    if (year == 2) obj.TyreProtectRateYear2 = rate;
                    if (year == 3) obj.TyreProtectRateYear3 = rate;
                },
                delegate (bool applicable) { obj.IsTyreApplicable = applicable; },
                obj.PolicyTenure
            );
        }

        public void RoadSideAssistConfig(addonCoverDtls item, DomQuickQuote obj)
        {
            ApplyConfig(
                item, obj,
                delegate
                {
                    obj.DefaultPerRoadSideAssist = obj.percentRoadSideAssistentered = obj.RoadSideAssistRateYear1 = Convert.ToDecimal(item.addonCoverRate1);
                },
                delegate (int year, decimal rate)
                {
                    if (year == 2) obj.RoadSideAssistRateYear2 = rate;
                    if (year == 3) obj.RoadSideAssistRateYear3 = rate;
                },
                delegate (bool applicable) { obj.IsRoadSideApplicable = applicable; },
                obj.PolicyTenure
            );
        }

        public void RTIConfig(addonCoverDtls item, DomQuickQuote obj)
        {
            ApplyConfig(
                item, obj,
                delegate
                {
                    obj.DefaultPerRTI = obj.percentRTIentered = obj.RTIRateYear1 = Convert.ToDecimal(item.addonCoverRate1);
                },
                delegate (int year, decimal rate)
                {
                    if (year == 2) obj.RTIRateYear2 = rate;
                    if (year == 3) obj.RTIRateYear3 = rate;
                },
                delegate (bool applicable) { obj.IsRTIApplicable = applicable; },
                obj.PolicyTenure
            );
        }
    }
}
