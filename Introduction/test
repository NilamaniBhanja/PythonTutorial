public class GeneralProposalInformation
{
    public Boolean ErrorTrackingNeeded { get; set; }
    public String ProductType { get; set; }
    public String PropBranchDetails_IMDBranchCode { get; set; }
    public String PropBranchDetails_IMDBranchName { get; set; }
    public Double PropClauseDetails_DepartmentCode_Mandatary { get; set; }
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Xml.Linq;

namespace TPReport.GPT;

public class XmlGenerator
{
    public void CreateHomeComprehensivePackageXml(string filePath)
    {
        // Create the root element with attributes
        XElement root = new XElement("Root",
            new XAttribute("Code", "2965"),
            new XAttribute("Name", "HomeComprehensivePackage"));

        // Create ProposalDetails section
        XElement proposalDetails = new XElement("ProposalDetails");

        // Add RiskDetails section
        proposalDetails.Add(CreateRiskDetails());

        // Add GeneralProposalInformation section
        proposalDetails.Add(CreateGeneralProposalInformation());

        // Add ClauseDetails section
        proposalDetails.Add(CreateClauseDetails());

        // Add WarrantyDetails section
        proposalDetails.Add(CreateWarrantyDetails());

        // Add ConditionDetails section
        proposalDetails.Add(CreateConditionDetails());

        // Add ExclusionDetails section
        proposalDetails.Add(CreateExclusionDetails());

        // Add OtherMappingFields section
        proposalDetails.Add(CreateOtherMappingFields());

        // Add ProposalDetails to root
        root.Add(proposalDetails);

        // Create the XML document
        XDocument doc = new XDocument(
            new XDeclaration("1.0", "utf-8", null),
            root);

        // Save the document
        doc.Save(filePath);
    }

    private XElement CreateRiskDetails()
    {
        XElement riskDetails = new XElement("RiskDetails");
        XElement block = new XElement("Block");

        // Add property risk elements
        block.Add(new XElement("PropRisks_AdmittedNonAdmittedLocation",
            new XAttribute("Type", "String"),
            new XAttribute("Value", "")));

        block.Add(new XElement("PropRisks_AreaLocality",
            new XAttribute("Type", "String"),
            new XAttribute("Value", "ABINASH CHAOWDHURY LANE")));

        block.Add(new XElement("PropRisks_Country1",
            new XAttribute("Type", "String"),
            new XAttribute("Value", "India")));

        block.Add(new XElement("PropRisks_EarthquakeZone",
            new XAttribute("Type", "String"),
            new XAttribute("Value", "II")));

        block.Add(new XElement("PropRisks_IsFloaterApplicable",
            new XAttribute("Type", "String"),
            new XAttribute("Value", "No")));

        block.Add(new XElement("PropRisks_IsMasterPolicytobePrinted",
            new XAttribute("Type", "Boolean"),
            new XAttribute("Value", "False")));

        // Add OtherDetailsGrid
        XElement otherDetailsGrid = new XElement("OtherDetailsGrid");

        // Add BPSooksmaFireSectionSI
        XElement bpSooksmaFireSectionSI = new XElement("BPSooksmaFireSectionSI",
            new XAttribute("Name", "BPSooksmaFireSectionSI"),
            new XAttribute("Value", "GRP1057"),
            new XElement("BPSooksmaFireSectionSI",
                new XAttribute("Type", "GroupData"),
                new XElement("ItemType",
                    new XAttribute("Name", "ItemType"),
                    new XAttribute("Value", "Additional Structure"),
                    new XAttribute("Type", "String")),
                new XElement("Description",
                    new XAttribute("Name", "Description"),
                    new XAttribute("Value", "fgndhndf"),
                    new XAttribute("Type", "String")),
                new XElement("SumInsured",
                    new XAttribute("Name", "SumInsured"),
                    new XAttribute("Value", "10000"),
                    new XAttribute("Type", "Double"))));

        otherDetailsGrid.Add(bpSooksmaFireSectionSI);

        // Add SectionIAddonNonTerrorismCover
        XElement sectionIAddonNonTerrorismCover = new XElement("SectionIAddonNonTerrorismCover",
            new XAttribute("Name", "Section I Addon Non Terrorism Cover"),
            new XAttribute("Value", "GRP536"),
            new XElement("SectionIAddonNonTerrorismCover",
                new XAttribute("Type", "GroupData"),
                new XElement("CoverGroups",
                    new XAttribute("Name", "Cover Groups"),
                    new XAttribute("Value", "Earthquake"),
                    new XAttribute("Type", "String")),
                new XElement("Description",
                    new XAttribute("Name", "Description"),
                    new XAttribute("Value", "fdfdvsvf"),
                    new XAttribute("Type", "String")),
                new XElement("SumInsured",
                    new XAttribute("Name", "Sum Insured"),
                    new XAttribute("Value", "5000"),
                    new XAttribute("Type", "Double")),
                new XElement("Rate",
                    new XAttribute("Name", "Rate"),
                    new XAttribute("Value", "0"),
                    new XAttribute("Type", "Double")),
                new XElement("Premium",
                    new XAttribute("Name", "Premium"),
                    new XAttribute("Value", "0"),
                    new XAttribute("Type", "Double"))));

        otherDetailsGrid.Add(sectionIAddonNonTerrorismCover);

        // Add PropRiskCol
        XElement propRiskCol = new XElement("PropRiskCol",
            new XAttribute("Name", "Bharat Griha Raksha Material Damage"),
            new XAttribute("Value", "0"),
            new XElement("PropRiskCol",
                new XAttribute("Type", "GroupData"),
                new XElement("IsOptionalCover",
                    new XAttribute("Type", "Boolean"),
                    new XAttribute("Value", "False"),
                    new XAttribute("Name", "IsOptionalCover")),
                new XElement("PropRisks_DifferentialSI",
                    new XAttribute("Type", "Double"),
                    new XAttribute("Value", "10000"),
                    new XAttribute("Name", "PropRisks_DifferentialSI")),
                new XElement("PropRisks_DummyPremium",
                    new XAttribute("Type", "Double"),
                    new XAttribute("Value", "0"),
                    new XAttribute("Name", "PropRisks_DummyPremium")),
                new XElement("PropRisks_DummyRate",
                    new XAttribute("Type", "Double"),
                    new XAttribute("Value", "0"),
                    new XAttribute("Name", "PropRisks_DummyRate"))));

        otherDetailsGrid.Add(propRiskCol);
        block.Add(otherDetailsGrid);

        // Add RiskCoverDetailsGrid
        XElement riskCoverDetailsGrid = new XElement("RiskCoverDetailsGrid");
        XElement riskGroup = new XElement("RiskGroup",
            new XAttribute("Name", "Bharat Griha Raksha Material Damage"),
            new XAttribute("Value", "Risk Wise Cover Details"),
            new XAttribute("Type", "GroupData"),
            new XElement("CoverSIComponant",
                new XAttribute("Name", "Section I Bharat Griha Raksha Material Damage"),
                new XAttribute("Value", "10000"),
                new XElement("PropCoverDetails_Applicable",
                    new XAttribute("Name", "PropCoverDetails_Applicable"),
                    new XAttribute("Type", "Boolean"),
                    new XAttribute("Value", "True")),
                new XElement("PropCoverDetails_CoverGroups",
                    new XAttribute("Name", "PropCoverDetails_CoverGroups"),
                    new XAttribute("Type", "String"),
                    new XAttribute("Value", "Section I Bharat Griha Raksha Material Damage")),
                new XElement("PropCoverDetails_DifferentialSI",
                    new XAttribute("Name", "PropCoverDetails_DifferentialSI"),
                    new XAttribute("Type", "Double"),
                    new XAttribute("Value", "10000"))));

        riskCoverDetailsGrid.Add(riskGroup);
        block.Add(riskCoverDetailsGrid);

        riskDetails.Add(block);
        return riskDetails;
    }

    private XElement CreateGeneralProposalInformation()
    {
        var model = new GeneralProposalInformation
        {
            ErrorTrackingNeeded = true,
            ProductType = "MB",
            PropBranchDetails_IMDBranchCode = "BR123",
            PropBranchDetails_IMDBranchName = "Nilamani Branch",
            PropClauseDetails_DepartmentCode_Mandatary = 29.0
        };

        SupportClass supportClass = new SupportClass();
        XElement xml = supportClass.CreateGeneralProposalInformation(model);

        //XElement generalProposalInformation = new XElement("GeneralProposalInformation");

        //generalProposalInformation.Add(new XElement("ErrorTrackingNeeded",
        //    new XAttribute("Type", "Boolean"),
        //    new XAttribute("Value", "False")));

        //generalProposalInformation.Add(new XElement("ProductType",
        //    new XAttribute("Type", "String"),
        //    new XAttribute("Value", "MB")));

        //generalProposalInformation.Add(new XElement("PropBranchDetails_IMDBranchCode",
        //    new XAttribute("Type", "String"),
        //    new XAttribute("Value", "")));

        //generalProposalInformation.Add(new XElement("PropBranchDetails_IMDBranchName",
        //    new XAttribute("Type", "String"),
        //    new XAttribute("Value", "")));

        //generalProposalInformation.Add(new XElement("PropClauseDetails_DepartmentCode_Mandatary",
        //    new XAttribute("Type", "Double"),
        //    new XAttribute("Value", "29")));

        //generalProposalInformation.Add(new XElement("PropWarranty_SectionCode",
        //    new XAttribute("Type", "String"),
        //    new XAttribute("Value", "")));

        return xml;
    }

    private XElement CreateClauseDetails()
    {
        XElement clauseDetails = new XElement("ClauseDetails");

        // Clause 1
        clauseDetails.Add(new XElement("ClauseDetails",
            new XAttribute("Type", "GroupData"),
            new XElement("PropClauseDetails_ClauseCode_Mandatary",
                new XAttribute("Type", "Double"),
                new XAttribute("Value", "51129")),
            new XElement("PropClauseDetails_ClauseNumber_Mandatary",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "6")),
            new XElement("PropClauseDetails_ClauseShortDescription",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "Section I: Accidental Damage Cover")),
            new XElement("PropClauseDetails_ClauseType",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "Optional True")),
            new XElement("PropClauseDetails_Default_Mandatary",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False")),
            new XElement("PropClauseDetails_IsDataDeleted",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False")),
            new XElement("PropClauseDetails_IsOldDataDeleted",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False"))));

        // Clause 2
        clauseDetails.Add(new XElement("ClauseDetails",
            new XAttribute("Type", "GroupData"),
            new XElement("PropClauseDetails_ClauseCode_Mandatary",
                new XAttribute("Type", "Double"),
                new XAttribute("Value", "51124")),
            new XElement("PropClauseDetails_ClauseNumber_Mandatary",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "1")),
            new XElement("PropClauseDetails_ClauseShortDescription",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "Section I: Agreed Value Basis for Valuable Content")),
            new XElement("PropClauseDetails_ClauseType",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "Optional True")),
            new XElement("PropClauseDetails_Default_Mandatary",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False")),
            new XElement("PropClauseDetails_IsDataDeleted",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False")),
            new XElement("PropClauseDetails_IsOldDataDeleted",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False"))));

        // Clause 3
        clauseDetails.Add(new XElement("ClauseDetails",
            new XAttribute("Type", "GroupData"),
            new XElement("PropClauseDetails_ClauseCode_Mandatary",
                new XAttribute("Type", "Double"),
                new XAttribute("Value", "51139")),
            new XElement("PropClauseDetails_ClauseNumber_Mandatary",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "17")),
            new XElement("PropClauseDetails_ClauseShortDescription",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "Section II:THEFT COVER UNACCOMPANIED BY HOUSEBREAKING")),
            new XElement("PropClauseDetails_ClauseType",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "Optional True")),
            new XElement("PropClauseDetails_Default_Mandatary",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False")),
            new XElement("PropClauseDetails_IsDataDeleted",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False")),
            new XElement("PropClauseDetails_IsOldDataDeleted",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False"))));

        return clauseDetails;
    }

    private XElement CreateWarrantyDetails()
    {
        XElement warrantyDetails = new XElement("WarrantyDetails");

        // Warranty 1
        warrantyDetails.Add(new XElement("WarrantyDetails",
            new XAttribute("Type", "GroupData"),
            new XElement("PropWarranty_Default_Val",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False")),
            new XElement("PropWarranty_IsDataDeleted",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False")),
            new XElement("PropWarranty_IsOldDataDeleted",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False")),
            new XElement("PropWarranty_WarrantyCode",
                new XAttribute("Type", "Double"),
                new XAttribute("Value", "45415")),
            new XElement("PropWarranty_WarrantyNumber",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "287")),
            new XElement("PropWarranty_WarrantyShortDescription",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "Section I: Insurable interest under the policy will be either the legal owner of the property or person/ entity having insurable interest by law.")),
            new XElement("PropWarranty_WarrantyType",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "Optional True"))));

        // Warranty 2
        warrantyDetails.Add(new XElement("WarrantyDetails",
            new XAttribute("Type", "GroupData"),
            new XElement("PropWarranty_Default_Val",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False")),
            new XElement("PropWarranty_IsDataDeleted",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False")),
            new XElement("PropWarranty_IsOldDataDeleted",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False")),
            new XElement("PropWarranty_WarrantyCode",
                new XAttribute("Type", "Double"),
                new XAttribute("Value", "45425")),
            new XElement("PropWarranty_WarrantyNumber",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "156")),
            new XElement("PropWarranty_WarrantyShortDescription",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "Section II:B")),
            new XElement("PropWarranty_WarrantyType",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "Optional True"))));

        return warrantyDetails;
    }

    private XElement CreateConditionDetails()
    {
        XElement conditionDetails = new XElement("ConditionDetails");

        // Condition 1
        conditionDetails.Add(new XElement("ConditionDetails",
            new XAttribute("Type", "GroupData"),
            new XElement("PropConditionDetails_ConditionCode",
                new XAttribute("Type", "Double"),
                new XAttribute("Value", "29517")),
            new XElement("PropConditionDetails_ConditionNumber",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "1")),
            new XElement("PropConditionDetails_ConditionShortDescription",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "Common Condition")),
            new XElement("PropConditionDetails_ConditionType",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "Optional True")),
            new XElement("PropConditionDetails_Default",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False")),
            new XElement("PropConditionDetails_IsDataDeleted",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False")),
            new XElement("PropConditionDetails_IsOldDataDeleted",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False"))));

        // Condition 2
        conditionDetails.Add(new XElement("ConditionDetails",
            new XAttribute("Type", "GroupData"),
            new XElement("PropConditionDetails_ConditionCode",
                new XAttribute("Type", "Double"),
                new XAttribute("Value", "45418")),
            new XElement("PropConditionDetails_ConditionNumber",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "4")),
            new XElement("PropConditionDetails_ConditionShortDescription",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "Section I:C")),
            new XElement("PropConditionDetails_ConditionType",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "Optional True")),
            new XElement("PropConditionDetails_Default",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False")),
            new XElement("PropConditionDetails_IsDataDeleted",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False")),
            new XElement("PropConditionDetails_IsOldDataDeleted",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False"))));

        return conditionDetails;
    }

    private XElement CreateExclusionDetails()
    {
        XElement exclusionDetails = new XElement("ExclusionDetails");

        // Exclusion 1
        exclusionDetails.Add(new XElement("ExclusionDetails",
            new XAttribute("Type", "GroupData"),
            new XElement("PropExclusionDetails_Default",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False")),
            new XElement("PropExclusionDetails_ExclusionCode",
                new XAttribute("Type", "Double"),
                new XAttribute("Value", "45416")),
            new XElement("PropExclusionDetails_ExclusionNumber",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "20")),
            new XElement("PropExclusionDetails_ExclusionShortDescription",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "Section I:A")),
            new XElement("PropExclusionDetails_ExclusionType",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "Optional True")),
            new XElement("PropExclusionDetails_IsDataDeleted",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False")),
            new XElement("PropExclusionDetails_IsOldDataDeleted",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False"))));

        // Exclusion 2
        exclusionDetails.Add(new XElement("ExclusionDetails",
            new XAttribute("Type", "GroupData"),
            new XElement("PropExclusionDetails_Default",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False")),
            new XElement("PropExclusionDetails_ExclusionCode",
                new XAttribute("Type", "Double"),
                new XAttribute("Value", "45417")),
            new XElement("PropExclusionDetails_ExclusionNumber",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "21")),
            new XElement("PropExclusionDetails_ExclusionShortDescription",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "Section I:B")),
            new XElement("PropExclusionDetails_ExclusionType",
                new XAttribute("Type", "String"),
                new XAttribute("Value", "Optional True")),
            new XElement("PropExclusionDetails_IsDataDeleted",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False")),
            new XElement("PropExclusionDetails_IsOldDataDeleted",
                new XAttribute("Type", "Boolean"),
                new XAttribute("Value", "False"))));

        return exclusionDetails;
    }

    private XElement CreateOtherMappingFields()
    {
        XElement otherMappingFields = new XElement("OtherMappingFields");

        otherMappingFields.Add(new XElement("SectionIBharatGrihaRakshaMaterialDamage",
            new XAttribute("Type", "Bharat Griha Raksha Material Damage"),
            new XAttribute("Name", "Section I Bharat Griha Raksha Material Damage"),
            new XAttribute("Value", "10000")));

        otherMappingFields.Add(new XElement("SectionITerrorismCover",
            new XAttribute("Type", "Bharat Griha Raksha Material Damage"),
            new XAttribute("Name", "Section I Terrorism Cover"),
            new XAttribute("Value", "10000")));

        otherMappingFields.Add(new XElement("SectionIAddonNonTerrorismCover",
            new XAttribute("Type", "Bharat Griha Raksha Material Damage"),
            new XAttribute("Name", "Section I Addon Non Terrorism Cover"),
            new XAttribute("Value", "5000")));

        return otherMappingFields;
    }
}


//GPT
//public static class XmlGenerator
//{
//    public static XElement BuildXml(XmlElementNode node)
//    {
//        var element = new XElement(node.ElementName);

//        foreach (var attr in node.Attributes)
//        {
//            if (!string.IsNullOrEmpty(attr.Name) && !string.IsNullOrEmpty(attr.Value))
//                element.SetAttributeValue(attr.Name, attr.Value);

//            if (!string.IsNullOrEmpty(attr.Type))
//                element.SetAttributeValue("Type", attr.Type);
//        }

//        foreach (var child in node.Children)
//            element.Add(BuildXml(child));

//        return element;
//    }

//    public static XDocument BuildRootXml(RootXmlModel rootModel)
//    {
//        var rootElement = new XElement("Root",
//            new XAttribute("Code", rootModel.Code),
//            new XAttribute("Name", rootModel.Name)
//        );

//        foreach (var child in rootModel.Children)
//            rootElement.Add(BuildXml(child));

//        return new XDocument(new XDeclaration("1.0", "utf-8", null), rootElement);
//    }
//}


//public static class XmlGenerator
//{
//    public static XElement BuildXml(XmlElementNode node)
//    {
//        var element = new XElement(node.ElementName);

//        // Add attributes
//        foreach (var attr in node.Attributes)
//        {
//            if (!string.IsNullOrEmpty(attr.Name) && !string.IsNullOrEmpty(attr.Value))
//            {
//                element.SetAttributeValue(attr.Name, attr.Value);
//            }
//            if (!string.IsNullOrEmpty(attr.Type))
//            {
//                element.SetAttributeValue("Type", attr.Type);
//            }
//        }

//        // Add children
//        foreach (var child in node.Children)
//        {
//            element.Add(BuildXml(child));
//        }

//        return element;
//    }

//    public static XDocument BuildRootXml(RootXmlModel rootModel)
//    {
//        var rootElement = new XElement("Root",
//            new XAttribute("Code", rootModel.Code),
//            new XAttribute("Name", rootModel.Name)
//        );

//        foreach (var child in rootModel.Children)
//        {
//            rootElement.Add(BuildXml(child));
//        }

//        return new XDocument(new XDeclaration("1.0", "utf-8", null), rootElement);
//    }
//}














using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;
using TPReport.Report;

namespace TPReport.GPT;

public class SupportClass
{
    public XElement CreateGeneralProposalInformation(object model, string objectName= "GeneralProposalInformation")
    {
        XElement XMLInfo = new XElement(objectName);
        PropertyInfo[] properties = null;

        switch (objectName)
        {
            case "GeneralProposalInformation":
                properties = typeof(GeneralProposalInformation).GetProperties();
                break;
        }

        foreach (PropertyInfo property in properties)
        {
            object value = property.GetValue(model);
            string stringValue = value?.ToString() ?? "";
            string typeName = GetTypeName(property.PropertyType);

            // Special handling for boolean values
            if (property.PropertyType == typeof(bool))
            {
                stringValue = value?.ToString().ToLower() ?? "false";
            }

            XMLInfo.Add(new XElement(property.Name,
                new XAttribute("Type", typeName),
                new XAttribute("Value", stringValue)));
        }

        return XMLInfo;
    }

    private string GetTypeName(Type type)
    {
        if (type == typeof(bool)) return "Boolean";
        if (type == typeof(string)) return "String";
        if (type == typeof(double)) return "Double";
        if (type == typeof(int)) return "Int32";
        if (type == typeof(decimal)) return "Decimal";
        if (type == typeof(DateTime)) return "DateTime";

        // Handle nullable types
        if (Nullable.GetUnderlyingType(type) != null)
        {
            return GetTypeName(Nullable.GetUnderlyingType(type));
        }

        return type.Name;
    }
}



public class Program
{
    public static void Main()
    {

        //var jsonString = File.ReadAllText("D:\\Project\\TP\\input.json");

        //// Deserialize JSON to your C# model (RootXmlModel)
        //var root = JsonConvert.DeserializeObject<RootXmlModel>(jsonString);

        //var xmlDoc = XmlGenerator.BuildRootXml(root);

        XmlGenerator generator = new XmlGenerator();
        generator.CreateHomeComprehensivePackageXml("output.xml");

        //Console.WriteLine(xmlDoc);
    }
}
